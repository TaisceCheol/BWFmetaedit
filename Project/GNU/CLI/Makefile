# Makefile.in generated by automake 1.11.1 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/bwfmetaedit
pkgincludedir = $(includedir)/bwfmetaedit
pkglibdir = $(libdir)/bwfmetaedit
pkglibexecdir = $(libexecdir)/bwfmetaedit
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-apple-darwin13.4.0
bin_PROGRAMS = bwfmetaedit$(EXEEXT)
subdir = .
DIST_COMMON = $(am__configure_deps) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(top_srcdir)/configure config.guess \
	config.sub depcomp install-sh missing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_bwfmetaedit_OBJECTS = CLI_Help.$(OBJEXT) CLI_Main.$(OBJEXT) \
	CommandLine_Parser.$(OBJEXT) Common_About.$(OBJEXT) \
	Core.$(OBJEXT) md5.$(OBJEXT) Riff_Base.$(OBJEXT) \
	Riff_Base_Streams.$(OBJEXT) Riff_Chunks_.$(OBJEXT) \
	Riff_Chunks_WAVE.$(OBJEXT) Riff_Chunks_WAVE__PMX.$(OBJEXT) \
	Riff_Chunks_WAVE_aXML.$(OBJEXT) \
	Riff_Chunks_WAVE_bext.$(OBJEXT) \
	Riff_Chunks_WAVE_data.$(OBJEXT) \
	Riff_Chunks_WAVE_ds64.$(OBJEXT) \
	Riff_Chunks_WAVE_FLLR.$(OBJEXT) \
	Riff_Chunks_WAVE_fmt_.$(OBJEXT) \
	Riff_Chunks_WAVE_INFO.$(OBJEXT) \
	Riff_Chunks_WAVE_INFO_xxxx.$(OBJEXT) \
	Riff_Chunks_WAVE_iXML.$(OBJEXT) \
	Riff_Chunks_WAVE_MD5_.$(OBJEXT) Riff_Handler.$(OBJEXT) \
	tinystr.$(OBJEXT) tinyxml.$(OBJEXT) tinyxmlerror.$(OBJEXT) \
	tinyxmlparser.$(OBJEXT) Conf.$(OBJEXT) \
	CriticalSection.$(OBJEXT) Dir.$(OBJEXT) File.$(OBJEXT) \
	FileName.$(OBJEXT) InfoMap.$(OBJEXT) int128s.$(OBJEXT) \
	int128u.$(OBJEXT) MemoryDebug.$(OBJEXT) OS_Utils.$(OBJEXT) \
	Translation.$(OBJEXT) Thread.$(OBJEXT) Utils.$(OBJEXT) \
	Ztring.$(OBJEXT) ZtringList.$(OBJEXT) ZtringListList.$(OBJEXT) \
	ZtringListListF.$(OBJEXT)
bwfmetaedit_OBJECTS = $(am_bwfmetaedit_OBJECTS)
bwfmetaedit_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(bwfmetaedit_SOURCES)
DIST_SOURCES = $(bwfmetaedit_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d "$(distdir)" \
    || { find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr "$(distdir)"; }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = ${SHELL} /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI/missing --run aclocal-1.11
AMTAR = ${SHELL} /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI/missing --run tar
AUTOCONF = ${SHELL} /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI/missing --run autoconf
AUTOHEADER = ${SHELL} /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI/missing --run autoheader
AUTOMAKE = ${SHELL} /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI/missing --run automake-1.11
AWK = awk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS =  -O2
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -DTIXML_USE_STL -pthread -O2
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"bwfmetaedit\" -DVERSION=\"0\"
DEPDIR = .deps
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EXEEXT = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS =  -lpthread -pthread
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI/missing --run makeinfo
MKDIR_P = ./install-sh -c -d
OBJEXT = o
PACKAGE = bwfmetaedit
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0
abs_builddir = /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI
abs_srcdir = /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI
abs_top_builddir = /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI
abs_top_srcdir = /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-apple-darwin13.4.0
build_alias = 
build_cpu = x86_64
build_os = darwin13.4.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/itma/Downloads/BWF_MetaEdit/Project/GNU/CLI/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(top_builddir)/./install-sh -c -d
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = 
top_builddir = .
top_srcdir = .
AUTOMAKE_OPTIONS = foreign
bwfmetaedit_SOURCES = \
    ../../../Source/CLI/CLI_Help.cpp \
    ../../../Source/CLI/CLI_Main.cpp \
    ../../../Source/CLI/CommandLine_Parser.cpp \
    ../../../Source/Common/Common_About.cpp \
    ../../../Source/Common/Core.cpp \
    ../../../Source/MD5/md5.c \
    ../../../Source/Riff/Riff_Base.cpp \
    ../../../Source/Riff/Riff_Base_Streams.cpp \
    ../../../Source/Riff/Riff_Chunks_.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_data.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp \
    ../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp \
    ../../../Source/Riff/Riff_Handler.cpp \
    ../../../Source/TinyXml/tinystr.cpp \
    ../../../Source/TinyXml/tinyxml.cpp \
    ../../../Source/TinyXml/tinyxmlerror.cpp \
    ../../../Source/TinyXml/tinyxmlparser.cpp \
    ../../../Source/ZenLib/Conf.cpp \
    ../../../Source/ZenLib/CriticalSection.cpp \
    ../../../Source/ZenLib/Dir.cpp \
    ../../../Source/ZenLib/File.cpp \
    ../../../Source/ZenLib/FileName.cpp \
    ../../../Source/ZenLib/InfoMap.cpp \
    ../../../Source/ZenLib/int128s.cpp \
    ../../../Source/ZenLib/int128u.cpp \
    ../../../Source/ZenLib/MemoryDebug.cpp \
    ../../../Source/ZenLib/OS_Utils.cpp \
    ../../../Source/ZenLib/Translation.cpp \
    ../../../Source/ZenLib/Thread.cpp \
    ../../../Source/ZenLib/Utils.cpp \
    ../../../Source/ZenLib/Ztring.cpp \
    ../../../Source/ZenLib/ZtringList.cpp \
    ../../../Source/ZenLib/ZtringListList.cpp \
    ../../../Source/ZenLib/ZtringListListF.cpp


#bwfmetaedit_LDFLAGS     = -no-undefined -version-info 0:0:0
INCLUDES = -I../../../Source
all: all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .o .obj
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign'; \
	      $(am__cd) $(srcdir) && $(AUTOMAKE) --foreign \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	$(am__cd) $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
bwfmetaedit$(EXEEXT): $(bwfmetaedit_OBJECTS) $(bwfmetaedit_DEPENDENCIES) 
	@rm -f bwfmetaedit$(EXEEXT)
	$(CXXLINK) $(bwfmetaedit_OBJECTS) $(bwfmetaedit_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/CLI_Help.Po
include ./$(DEPDIR)/CLI_Main.Po
include ./$(DEPDIR)/CommandLine_Parser.Po
include ./$(DEPDIR)/Common_About.Po
include ./$(DEPDIR)/Conf.Po
include ./$(DEPDIR)/Core.Po
include ./$(DEPDIR)/CriticalSection.Po
include ./$(DEPDIR)/Dir.Po
include ./$(DEPDIR)/File.Po
include ./$(DEPDIR)/FileName.Po
include ./$(DEPDIR)/InfoMap.Po
include ./$(DEPDIR)/MemoryDebug.Po
include ./$(DEPDIR)/OS_Utils.Po
include ./$(DEPDIR)/Riff_Base.Po
include ./$(DEPDIR)/Riff_Base_Streams.Po
include ./$(DEPDIR)/Riff_Chunks_.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_FLLR.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_INFO.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_INFO_xxxx.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_MD5_.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE__PMX.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_aXML.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_bext.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_data.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_ds64.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_fmt_.Po
include ./$(DEPDIR)/Riff_Chunks_WAVE_iXML.Po
include ./$(DEPDIR)/Riff_Handler.Po
include ./$(DEPDIR)/Thread.Po
include ./$(DEPDIR)/Translation.Po
include ./$(DEPDIR)/Utils.Po
include ./$(DEPDIR)/Ztring.Po
include ./$(DEPDIR)/ZtringList.Po
include ./$(DEPDIR)/ZtringListList.Po
include ./$(DEPDIR)/ZtringListListF.Po
include ./$(DEPDIR)/int128s.Po
include ./$(DEPDIR)/int128u.Po
include ./$(DEPDIR)/md5.Po
include ./$(DEPDIR)/tinystr.Po
include ./$(DEPDIR)/tinyxml.Po
include ./$(DEPDIR)/tinyxmlerror.Po
include ./$(DEPDIR)/tinyxmlparser.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

md5.o: ../../../Source/MD5/md5.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT md5.o -MD -MP -MF $(DEPDIR)/md5.Tpo -c -o md5.o `test -f '../../../Source/MD5/md5.c' || echo '$(srcdir)/'`../../../Source/MD5/md5.c
	$(am__mv) $(DEPDIR)/md5.Tpo $(DEPDIR)/md5.Po
#	source='../../../Source/MD5/md5.c' object='md5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o md5.o `test -f '../../../Source/MD5/md5.c' || echo '$(srcdir)/'`../../../Source/MD5/md5.c

md5.obj: ../../../Source/MD5/md5.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT md5.obj -MD -MP -MF $(DEPDIR)/md5.Tpo -c -o md5.obj `if test -f '../../../Source/MD5/md5.c'; then $(CYGPATH_W) '../../../Source/MD5/md5.c'; else $(CYGPATH_W) '$(srcdir)/../../../Source/MD5/md5.c'; fi`
	$(am__mv) $(DEPDIR)/md5.Tpo $(DEPDIR)/md5.Po
#	source='../../../Source/MD5/md5.c' object='md5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o md5.obj `if test -f '../../../Source/MD5/md5.c'; then $(CYGPATH_W) '../../../Source/MD5/md5.c'; else $(CYGPATH_W) '$(srcdir)/../../../Source/MD5/md5.c'; fi`

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

CLI_Help.o: ../../../Source/CLI/CLI_Help.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CLI_Help.o -MD -MP -MF $(DEPDIR)/CLI_Help.Tpo -c -o CLI_Help.o `test -f '../../../Source/CLI/CLI_Help.cpp' || echo '$(srcdir)/'`../../../Source/CLI/CLI_Help.cpp
	$(am__mv) $(DEPDIR)/CLI_Help.Tpo $(DEPDIR)/CLI_Help.Po
#	source='../../../Source/CLI/CLI_Help.cpp' object='CLI_Help.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CLI_Help.o `test -f '../../../Source/CLI/CLI_Help.cpp' || echo '$(srcdir)/'`../../../Source/CLI/CLI_Help.cpp

CLI_Help.obj: ../../../Source/CLI/CLI_Help.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CLI_Help.obj -MD -MP -MF $(DEPDIR)/CLI_Help.Tpo -c -o CLI_Help.obj `if test -f '../../../Source/CLI/CLI_Help.cpp'; then $(CYGPATH_W) '../../../Source/CLI/CLI_Help.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/CLI/CLI_Help.cpp'; fi`
	$(am__mv) $(DEPDIR)/CLI_Help.Tpo $(DEPDIR)/CLI_Help.Po
#	source='../../../Source/CLI/CLI_Help.cpp' object='CLI_Help.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CLI_Help.obj `if test -f '../../../Source/CLI/CLI_Help.cpp'; then $(CYGPATH_W) '../../../Source/CLI/CLI_Help.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/CLI/CLI_Help.cpp'; fi`

CLI_Main.o: ../../../Source/CLI/CLI_Main.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CLI_Main.o -MD -MP -MF $(DEPDIR)/CLI_Main.Tpo -c -o CLI_Main.o `test -f '../../../Source/CLI/CLI_Main.cpp' || echo '$(srcdir)/'`../../../Source/CLI/CLI_Main.cpp
	$(am__mv) $(DEPDIR)/CLI_Main.Tpo $(DEPDIR)/CLI_Main.Po
#	source='../../../Source/CLI/CLI_Main.cpp' object='CLI_Main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CLI_Main.o `test -f '../../../Source/CLI/CLI_Main.cpp' || echo '$(srcdir)/'`../../../Source/CLI/CLI_Main.cpp

CLI_Main.obj: ../../../Source/CLI/CLI_Main.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CLI_Main.obj -MD -MP -MF $(DEPDIR)/CLI_Main.Tpo -c -o CLI_Main.obj `if test -f '../../../Source/CLI/CLI_Main.cpp'; then $(CYGPATH_W) '../../../Source/CLI/CLI_Main.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/CLI/CLI_Main.cpp'; fi`
	$(am__mv) $(DEPDIR)/CLI_Main.Tpo $(DEPDIR)/CLI_Main.Po
#	source='../../../Source/CLI/CLI_Main.cpp' object='CLI_Main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CLI_Main.obj `if test -f '../../../Source/CLI/CLI_Main.cpp'; then $(CYGPATH_W) '../../../Source/CLI/CLI_Main.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/CLI/CLI_Main.cpp'; fi`

CommandLine_Parser.o: ../../../Source/CLI/CommandLine_Parser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommandLine_Parser.o -MD -MP -MF $(DEPDIR)/CommandLine_Parser.Tpo -c -o CommandLine_Parser.o `test -f '../../../Source/CLI/CommandLine_Parser.cpp' || echo '$(srcdir)/'`../../../Source/CLI/CommandLine_Parser.cpp
	$(am__mv) $(DEPDIR)/CommandLine_Parser.Tpo $(DEPDIR)/CommandLine_Parser.Po
#	source='../../../Source/CLI/CommandLine_Parser.cpp' object='CommandLine_Parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommandLine_Parser.o `test -f '../../../Source/CLI/CommandLine_Parser.cpp' || echo '$(srcdir)/'`../../../Source/CLI/CommandLine_Parser.cpp

CommandLine_Parser.obj: ../../../Source/CLI/CommandLine_Parser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommandLine_Parser.obj -MD -MP -MF $(DEPDIR)/CommandLine_Parser.Tpo -c -o CommandLine_Parser.obj `if test -f '../../../Source/CLI/CommandLine_Parser.cpp'; then $(CYGPATH_W) '../../../Source/CLI/CommandLine_Parser.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/CLI/CommandLine_Parser.cpp'; fi`
	$(am__mv) $(DEPDIR)/CommandLine_Parser.Tpo $(DEPDIR)/CommandLine_Parser.Po
#	source='../../../Source/CLI/CommandLine_Parser.cpp' object='CommandLine_Parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommandLine_Parser.obj `if test -f '../../../Source/CLI/CommandLine_Parser.cpp'; then $(CYGPATH_W) '../../../Source/CLI/CommandLine_Parser.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/CLI/CommandLine_Parser.cpp'; fi`

Common_About.o: ../../../Source/Common/Common_About.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Common_About.o -MD -MP -MF $(DEPDIR)/Common_About.Tpo -c -o Common_About.o `test -f '../../../Source/Common/Common_About.cpp' || echo '$(srcdir)/'`../../../Source/Common/Common_About.cpp
	$(am__mv) $(DEPDIR)/Common_About.Tpo $(DEPDIR)/Common_About.Po
#	source='../../../Source/Common/Common_About.cpp' object='Common_About.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Common_About.o `test -f '../../../Source/Common/Common_About.cpp' || echo '$(srcdir)/'`../../../Source/Common/Common_About.cpp

Common_About.obj: ../../../Source/Common/Common_About.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Common_About.obj -MD -MP -MF $(DEPDIR)/Common_About.Tpo -c -o Common_About.obj `if test -f '../../../Source/Common/Common_About.cpp'; then $(CYGPATH_W) '../../../Source/Common/Common_About.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Common/Common_About.cpp'; fi`
	$(am__mv) $(DEPDIR)/Common_About.Tpo $(DEPDIR)/Common_About.Po
#	source='../../../Source/Common/Common_About.cpp' object='Common_About.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Common_About.obj `if test -f '../../../Source/Common/Common_About.cpp'; then $(CYGPATH_W) '../../../Source/Common/Common_About.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Common/Common_About.cpp'; fi`

Core.o: ../../../Source/Common/Core.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Core.o -MD -MP -MF $(DEPDIR)/Core.Tpo -c -o Core.o `test -f '../../../Source/Common/Core.cpp' || echo '$(srcdir)/'`../../../Source/Common/Core.cpp
	$(am__mv) $(DEPDIR)/Core.Tpo $(DEPDIR)/Core.Po
#	source='../../../Source/Common/Core.cpp' object='Core.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Core.o `test -f '../../../Source/Common/Core.cpp' || echo '$(srcdir)/'`../../../Source/Common/Core.cpp

Core.obj: ../../../Source/Common/Core.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Core.obj -MD -MP -MF $(DEPDIR)/Core.Tpo -c -o Core.obj `if test -f '../../../Source/Common/Core.cpp'; then $(CYGPATH_W) '../../../Source/Common/Core.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Common/Core.cpp'; fi`
	$(am__mv) $(DEPDIR)/Core.Tpo $(DEPDIR)/Core.Po
#	source='../../../Source/Common/Core.cpp' object='Core.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Core.obj `if test -f '../../../Source/Common/Core.cpp'; then $(CYGPATH_W) '../../../Source/Common/Core.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Common/Core.cpp'; fi`

Riff_Base.o: ../../../Source/Riff/Riff_Base.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Base.o -MD -MP -MF $(DEPDIR)/Riff_Base.Tpo -c -o Riff_Base.o `test -f '../../../Source/Riff/Riff_Base.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Base.cpp
	$(am__mv) $(DEPDIR)/Riff_Base.Tpo $(DEPDIR)/Riff_Base.Po
#	source='../../../Source/Riff/Riff_Base.cpp' object='Riff_Base.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Base.o `test -f '../../../Source/Riff/Riff_Base.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Base.cpp

Riff_Base.obj: ../../../Source/Riff/Riff_Base.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Base.obj -MD -MP -MF $(DEPDIR)/Riff_Base.Tpo -c -o Riff_Base.obj `if test -f '../../../Source/Riff/Riff_Base.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Base.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Base.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Base.Tpo $(DEPDIR)/Riff_Base.Po
#	source='../../../Source/Riff/Riff_Base.cpp' object='Riff_Base.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Base.obj `if test -f '../../../Source/Riff/Riff_Base.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Base.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Base.cpp'; fi`

Riff_Base_Streams.o: ../../../Source/Riff/Riff_Base_Streams.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Base_Streams.o -MD -MP -MF $(DEPDIR)/Riff_Base_Streams.Tpo -c -o Riff_Base_Streams.o `test -f '../../../Source/Riff/Riff_Base_Streams.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Base_Streams.cpp
	$(am__mv) $(DEPDIR)/Riff_Base_Streams.Tpo $(DEPDIR)/Riff_Base_Streams.Po
#	source='../../../Source/Riff/Riff_Base_Streams.cpp' object='Riff_Base_Streams.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Base_Streams.o `test -f '../../../Source/Riff/Riff_Base_Streams.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Base_Streams.cpp

Riff_Base_Streams.obj: ../../../Source/Riff/Riff_Base_Streams.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Base_Streams.obj -MD -MP -MF $(DEPDIR)/Riff_Base_Streams.Tpo -c -o Riff_Base_Streams.obj `if test -f '../../../Source/Riff/Riff_Base_Streams.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Base_Streams.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Base_Streams.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Base_Streams.Tpo $(DEPDIR)/Riff_Base_Streams.Po
#	source='../../../Source/Riff/Riff_Base_Streams.cpp' object='Riff_Base_Streams.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Base_Streams.obj `if test -f '../../../Source/Riff/Riff_Base_Streams.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Base_Streams.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Base_Streams.cpp'; fi`

Riff_Chunks_.o: ../../../Source/Riff/Riff_Chunks_.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_.Tpo -c -o Riff_Chunks_.o `test -f '../../../Source/Riff/Riff_Chunks_.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_.Tpo $(DEPDIR)/Riff_Chunks_.Po
#	source='../../../Source/Riff/Riff_Chunks_.cpp' object='Riff_Chunks_.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_.o `test -f '../../../Source/Riff/Riff_Chunks_.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_.cpp

Riff_Chunks_.obj: ../../../Source/Riff/Riff_Chunks_.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_.Tpo -c -o Riff_Chunks_.obj `if test -f '../../../Source/Riff/Riff_Chunks_.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_.Tpo $(DEPDIR)/Riff_Chunks_.Po
#	source='../../../Source/Riff/Riff_Chunks_.cpp' object='Riff_Chunks_.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_.obj `if test -f '../../../Source/Riff/Riff_Chunks_.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_.cpp'; fi`

Riff_Chunks_WAVE.o: ../../../Source/Riff/Riff_Chunks_WAVE.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE.Tpo -c -o Riff_Chunks_WAVE.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE.Tpo $(DEPDIR)/Riff_Chunks_WAVE.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE.cpp' object='Riff_Chunks_WAVE.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE.cpp

Riff_Chunks_WAVE.obj: ../../../Source/Riff/Riff_Chunks_WAVE.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE.Tpo -c -o Riff_Chunks_WAVE.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE.Tpo $(DEPDIR)/Riff_Chunks_WAVE.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE.cpp' object='Riff_Chunks_WAVE.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE.cpp'; fi`

Riff_Chunks_WAVE__PMX.o: ../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE__PMX.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE__PMX.Tpo -c -o Riff_Chunks_WAVE__PMX.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE__PMX.Tpo $(DEPDIR)/Riff_Chunks_WAVE__PMX.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp' object='Riff_Chunks_WAVE__PMX.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE__PMX.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp

Riff_Chunks_WAVE__PMX.obj: ../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE__PMX.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE__PMX.Tpo -c -o Riff_Chunks_WAVE__PMX.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE__PMX.Tpo $(DEPDIR)/Riff_Chunks_WAVE__PMX.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp' object='Riff_Chunks_WAVE__PMX.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE__PMX.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE__PMX.cpp'; fi`

Riff_Chunks_WAVE_aXML.o: ../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_aXML.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_aXML.Tpo -c -o Riff_Chunks_WAVE_aXML.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_aXML.Tpo $(DEPDIR)/Riff_Chunks_WAVE_aXML.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp' object='Riff_Chunks_WAVE_aXML.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_aXML.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp

Riff_Chunks_WAVE_aXML.obj: ../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_aXML.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_aXML.Tpo -c -o Riff_Chunks_WAVE_aXML.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_aXML.Tpo $(DEPDIR)/Riff_Chunks_WAVE_aXML.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp' object='Riff_Chunks_WAVE_aXML.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_aXML.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_aXML.cpp'; fi`

Riff_Chunks_WAVE_bext.o: ../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_bext.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_bext.Tpo -c -o Riff_Chunks_WAVE_bext.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_bext.Tpo $(DEPDIR)/Riff_Chunks_WAVE_bext.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp' object='Riff_Chunks_WAVE_bext.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_bext.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp

Riff_Chunks_WAVE_bext.obj: ../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_bext.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_bext.Tpo -c -o Riff_Chunks_WAVE_bext.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_bext.Tpo $(DEPDIR)/Riff_Chunks_WAVE_bext.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp' object='Riff_Chunks_WAVE_bext.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_bext.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_bext.cpp'; fi`

Riff_Chunks_WAVE_data.o: ../../../Source/Riff/Riff_Chunks_WAVE_data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_data.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_data.Tpo -c -o Riff_Chunks_WAVE_data.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_data.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_data.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_data.Tpo $(DEPDIR)/Riff_Chunks_WAVE_data.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_data.cpp' object='Riff_Chunks_WAVE_data.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_data.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_data.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_data.cpp

Riff_Chunks_WAVE_data.obj: ../../../Source/Riff/Riff_Chunks_WAVE_data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_data.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_data.Tpo -c -o Riff_Chunks_WAVE_data.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_data.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_data.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_data.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_data.Tpo $(DEPDIR)/Riff_Chunks_WAVE_data.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_data.cpp' object='Riff_Chunks_WAVE_data.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_data.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_data.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_data.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_data.cpp'; fi`

Riff_Chunks_WAVE_ds64.o: ../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_ds64.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_ds64.Tpo -c -o Riff_Chunks_WAVE_ds64.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_ds64.Tpo $(DEPDIR)/Riff_Chunks_WAVE_ds64.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp' object='Riff_Chunks_WAVE_ds64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_ds64.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp

Riff_Chunks_WAVE_ds64.obj: ../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_ds64.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_ds64.Tpo -c -o Riff_Chunks_WAVE_ds64.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_ds64.Tpo $(DEPDIR)/Riff_Chunks_WAVE_ds64.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp' object='Riff_Chunks_WAVE_ds64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_ds64.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_ds64.cpp'; fi`

Riff_Chunks_WAVE_FLLR.o: ../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_FLLR.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_FLLR.Tpo -c -o Riff_Chunks_WAVE_FLLR.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_FLLR.Tpo $(DEPDIR)/Riff_Chunks_WAVE_FLLR.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp' object='Riff_Chunks_WAVE_FLLR.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_FLLR.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp

Riff_Chunks_WAVE_FLLR.obj: ../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_FLLR.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_FLLR.Tpo -c -o Riff_Chunks_WAVE_FLLR.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_FLLR.Tpo $(DEPDIR)/Riff_Chunks_WAVE_FLLR.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp' object='Riff_Chunks_WAVE_FLLR.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_FLLR.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_FLLR.cpp'; fi`

Riff_Chunks_WAVE_fmt_.o: ../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_fmt_.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_fmt_.Tpo -c -o Riff_Chunks_WAVE_fmt_.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_fmt_.Tpo $(DEPDIR)/Riff_Chunks_WAVE_fmt_.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp' object='Riff_Chunks_WAVE_fmt_.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_fmt_.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp

Riff_Chunks_WAVE_fmt_.obj: ../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_fmt_.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_fmt_.Tpo -c -o Riff_Chunks_WAVE_fmt_.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_fmt_.Tpo $(DEPDIR)/Riff_Chunks_WAVE_fmt_.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp' object='Riff_Chunks_WAVE_fmt_.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_fmt_.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_fmt_.cpp'; fi`

Riff_Chunks_WAVE_INFO.o: ../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_INFO.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_INFO.Tpo -c -o Riff_Chunks_WAVE_INFO.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_INFO.Tpo $(DEPDIR)/Riff_Chunks_WAVE_INFO.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp' object='Riff_Chunks_WAVE_INFO.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_INFO.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp

Riff_Chunks_WAVE_INFO.obj: ../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_INFO.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_INFO.Tpo -c -o Riff_Chunks_WAVE_INFO.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_INFO.Tpo $(DEPDIR)/Riff_Chunks_WAVE_INFO.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp' object='Riff_Chunks_WAVE_INFO.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_INFO.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_INFO.cpp'; fi`

Riff_Chunks_WAVE_INFO_xxxx.o: ../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_INFO_xxxx.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_INFO_xxxx.Tpo -c -o Riff_Chunks_WAVE_INFO_xxxx.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_INFO_xxxx.Tpo $(DEPDIR)/Riff_Chunks_WAVE_INFO_xxxx.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp' object='Riff_Chunks_WAVE_INFO_xxxx.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_INFO_xxxx.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp

Riff_Chunks_WAVE_INFO_xxxx.obj: ../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_INFO_xxxx.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_INFO_xxxx.Tpo -c -o Riff_Chunks_WAVE_INFO_xxxx.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_INFO_xxxx.Tpo $(DEPDIR)/Riff_Chunks_WAVE_INFO_xxxx.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp' object='Riff_Chunks_WAVE_INFO_xxxx.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_INFO_xxxx.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_INFO_xxxx.cpp'; fi`

Riff_Chunks_WAVE_iXML.o: ../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_iXML.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_iXML.Tpo -c -o Riff_Chunks_WAVE_iXML.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_iXML.Tpo $(DEPDIR)/Riff_Chunks_WAVE_iXML.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp' object='Riff_Chunks_WAVE_iXML.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_iXML.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp

Riff_Chunks_WAVE_iXML.obj: ../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_iXML.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_iXML.Tpo -c -o Riff_Chunks_WAVE_iXML.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_iXML.Tpo $(DEPDIR)/Riff_Chunks_WAVE_iXML.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp' object='Riff_Chunks_WAVE_iXML.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_iXML.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_iXML.cpp'; fi`

Riff_Chunks_WAVE_MD5_.o: ../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_MD5_.o -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_MD5_.Tpo -c -o Riff_Chunks_WAVE_MD5_.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_MD5_.Tpo $(DEPDIR)/Riff_Chunks_WAVE_MD5_.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp' object='Riff_Chunks_WAVE_MD5_.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_MD5_.o `test -f '../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp

Riff_Chunks_WAVE_MD5_.obj: ../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Chunks_WAVE_MD5_.obj -MD -MP -MF $(DEPDIR)/Riff_Chunks_WAVE_MD5_.Tpo -c -o Riff_Chunks_WAVE_MD5_.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Chunks_WAVE_MD5_.Tpo $(DEPDIR)/Riff_Chunks_WAVE_MD5_.Po
#	source='../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp' object='Riff_Chunks_WAVE_MD5_.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Chunks_WAVE_MD5_.obj `if test -f '../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Chunks_WAVE_MD5_.cpp'; fi`

Riff_Handler.o: ../../../Source/Riff/Riff_Handler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Handler.o -MD -MP -MF $(DEPDIR)/Riff_Handler.Tpo -c -o Riff_Handler.o `test -f '../../../Source/Riff/Riff_Handler.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Handler.cpp
	$(am__mv) $(DEPDIR)/Riff_Handler.Tpo $(DEPDIR)/Riff_Handler.Po
#	source='../../../Source/Riff/Riff_Handler.cpp' object='Riff_Handler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Handler.o `test -f '../../../Source/Riff/Riff_Handler.cpp' || echo '$(srcdir)/'`../../../Source/Riff/Riff_Handler.cpp

Riff_Handler.obj: ../../../Source/Riff/Riff_Handler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Riff_Handler.obj -MD -MP -MF $(DEPDIR)/Riff_Handler.Tpo -c -o Riff_Handler.obj `if test -f '../../../Source/Riff/Riff_Handler.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Handler.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Handler.cpp'; fi`
	$(am__mv) $(DEPDIR)/Riff_Handler.Tpo $(DEPDIR)/Riff_Handler.Po
#	source='../../../Source/Riff/Riff_Handler.cpp' object='Riff_Handler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Riff_Handler.obj `if test -f '../../../Source/Riff/Riff_Handler.cpp'; then $(CYGPATH_W) '../../../Source/Riff/Riff_Handler.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/Riff/Riff_Handler.cpp'; fi`

tinystr.o: ../../../Source/TinyXml/tinystr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tinystr.o -MD -MP -MF $(DEPDIR)/tinystr.Tpo -c -o tinystr.o `test -f '../../../Source/TinyXml/tinystr.cpp' || echo '$(srcdir)/'`../../../Source/TinyXml/tinystr.cpp
	$(am__mv) $(DEPDIR)/tinystr.Tpo $(DEPDIR)/tinystr.Po
#	source='../../../Source/TinyXml/tinystr.cpp' object='tinystr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tinystr.o `test -f '../../../Source/TinyXml/tinystr.cpp' || echo '$(srcdir)/'`../../../Source/TinyXml/tinystr.cpp

tinystr.obj: ../../../Source/TinyXml/tinystr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tinystr.obj -MD -MP -MF $(DEPDIR)/tinystr.Tpo -c -o tinystr.obj `if test -f '../../../Source/TinyXml/tinystr.cpp'; then $(CYGPATH_W) '../../../Source/TinyXml/tinystr.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/TinyXml/tinystr.cpp'; fi`
	$(am__mv) $(DEPDIR)/tinystr.Tpo $(DEPDIR)/tinystr.Po
#	source='../../../Source/TinyXml/tinystr.cpp' object='tinystr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tinystr.obj `if test -f '../../../Source/TinyXml/tinystr.cpp'; then $(CYGPATH_W) '../../../Source/TinyXml/tinystr.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/TinyXml/tinystr.cpp'; fi`

tinyxml.o: ../../../Source/TinyXml/tinyxml.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tinyxml.o -MD -MP -MF $(DEPDIR)/tinyxml.Tpo -c -o tinyxml.o `test -f '../../../Source/TinyXml/tinyxml.cpp' || echo '$(srcdir)/'`../../../Source/TinyXml/tinyxml.cpp
	$(am__mv) $(DEPDIR)/tinyxml.Tpo $(DEPDIR)/tinyxml.Po
#	source='../../../Source/TinyXml/tinyxml.cpp' object='tinyxml.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tinyxml.o `test -f '../../../Source/TinyXml/tinyxml.cpp' || echo '$(srcdir)/'`../../../Source/TinyXml/tinyxml.cpp

tinyxml.obj: ../../../Source/TinyXml/tinyxml.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tinyxml.obj -MD -MP -MF $(DEPDIR)/tinyxml.Tpo -c -o tinyxml.obj `if test -f '../../../Source/TinyXml/tinyxml.cpp'; then $(CYGPATH_W) '../../../Source/TinyXml/tinyxml.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/TinyXml/tinyxml.cpp'; fi`
	$(am__mv) $(DEPDIR)/tinyxml.Tpo $(DEPDIR)/tinyxml.Po
#	source='../../../Source/TinyXml/tinyxml.cpp' object='tinyxml.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tinyxml.obj `if test -f '../../../Source/TinyXml/tinyxml.cpp'; then $(CYGPATH_W) '../../../Source/TinyXml/tinyxml.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/TinyXml/tinyxml.cpp'; fi`

tinyxmlerror.o: ../../../Source/TinyXml/tinyxmlerror.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tinyxmlerror.o -MD -MP -MF $(DEPDIR)/tinyxmlerror.Tpo -c -o tinyxmlerror.o `test -f '../../../Source/TinyXml/tinyxmlerror.cpp' || echo '$(srcdir)/'`../../../Source/TinyXml/tinyxmlerror.cpp
	$(am__mv) $(DEPDIR)/tinyxmlerror.Tpo $(DEPDIR)/tinyxmlerror.Po
#	source='../../../Source/TinyXml/tinyxmlerror.cpp' object='tinyxmlerror.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tinyxmlerror.o `test -f '../../../Source/TinyXml/tinyxmlerror.cpp' || echo '$(srcdir)/'`../../../Source/TinyXml/tinyxmlerror.cpp

tinyxmlerror.obj: ../../../Source/TinyXml/tinyxmlerror.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tinyxmlerror.obj -MD -MP -MF $(DEPDIR)/tinyxmlerror.Tpo -c -o tinyxmlerror.obj `if test -f '../../../Source/TinyXml/tinyxmlerror.cpp'; then $(CYGPATH_W) '../../../Source/TinyXml/tinyxmlerror.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/TinyXml/tinyxmlerror.cpp'; fi`
	$(am__mv) $(DEPDIR)/tinyxmlerror.Tpo $(DEPDIR)/tinyxmlerror.Po
#	source='../../../Source/TinyXml/tinyxmlerror.cpp' object='tinyxmlerror.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tinyxmlerror.obj `if test -f '../../../Source/TinyXml/tinyxmlerror.cpp'; then $(CYGPATH_W) '../../../Source/TinyXml/tinyxmlerror.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/TinyXml/tinyxmlerror.cpp'; fi`

tinyxmlparser.o: ../../../Source/TinyXml/tinyxmlparser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tinyxmlparser.o -MD -MP -MF $(DEPDIR)/tinyxmlparser.Tpo -c -o tinyxmlparser.o `test -f '../../../Source/TinyXml/tinyxmlparser.cpp' || echo '$(srcdir)/'`../../../Source/TinyXml/tinyxmlparser.cpp
	$(am__mv) $(DEPDIR)/tinyxmlparser.Tpo $(DEPDIR)/tinyxmlparser.Po
#	source='../../../Source/TinyXml/tinyxmlparser.cpp' object='tinyxmlparser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tinyxmlparser.o `test -f '../../../Source/TinyXml/tinyxmlparser.cpp' || echo '$(srcdir)/'`../../../Source/TinyXml/tinyxmlparser.cpp

tinyxmlparser.obj: ../../../Source/TinyXml/tinyxmlparser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tinyxmlparser.obj -MD -MP -MF $(DEPDIR)/tinyxmlparser.Tpo -c -o tinyxmlparser.obj `if test -f '../../../Source/TinyXml/tinyxmlparser.cpp'; then $(CYGPATH_W) '../../../Source/TinyXml/tinyxmlparser.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/TinyXml/tinyxmlparser.cpp'; fi`
	$(am__mv) $(DEPDIR)/tinyxmlparser.Tpo $(DEPDIR)/tinyxmlparser.Po
#	source='../../../Source/TinyXml/tinyxmlparser.cpp' object='tinyxmlparser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tinyxmlparser.obj `if test -f '../../../Source/TinyXml/tinyxmlparser.cpp'; then $(CYGPATH_W) '../../../Source/TinyXml/tinyxmlparser.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/TinyXml/tinyxmlparser.cpp'; fi`

Conf.o: ../../../Source/ZenLib/Conf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Conf.o -MD -MP -MF $(DEPDIR)/Conf.Tpo -c -o Conf.o `test -f '../../../Source/ZenLib/Conf.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Conf.cpp
	$(am__mv) $(DEPDIR)/Conf.Tpo $(DEPDIR)/Conf.Po
#	source='../../../Source/ZenLib/Conf.cpp' object='Conf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Conf.o `test -f '../../../Source/ZenLib/Conf.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Conf.cpp

Conf.obj: ../../../Source/ZenLib/Conf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Conf.obj -MD -MP -MF $(DEPDIR)/Conf.Tpo -c -o Conf.obj `if test -f '../../../Source/ZenLib/Conf.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Conf.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Conf.cpp'; fi`
	$(am__mv) $(DEPDIR)/Conf.Tpo $(DEPDIR)/Conf.Po
#	source='../../../Source/ZenLib/Conf.cpp' object='Conf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Conf.obj `if test -f '../../../Source/ZenLib/Conf.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Conf.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Conf.cpp'; fi`

CriticalSection.o: ../../../Source/ZenLib/CriticalSection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CriticalSection.o -MD -MP -MF $(DEPDIR)/CriticalSection.Tpo -c -o CriticalSection.o `test -f '../../../Source/ZenLib/CriticalSection.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/CriticalSection.cpp
	$(am__mv) $(DEPDIR)/CriticalSection.Tpo $(DEPDIR)/CriticalSection.Po
#	source='../../../Source/ZenLib/CriticalSection.cpp' object='CriticalSection.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CriticalSection.o `test -f '../../../Source/ZenLib/CriticalSection.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/CriticalSection.cpp

CriticalSection.obj: ../../../Source/ZenLib/CriticalSection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CriticalSection.obj -MD -MP -MF $(DEPDIR)/CriticalSection.Tpo -c -o CriticalSection.obj `if test -f '../../../Source/ZenLib/CriticalSection.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/CriticalSection.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/CriticalSection.cpp'; fi`
	$(am__mv) $(DEPDIR)/CriticalSection.Tpo $(DEPDIR)/CriticalSection.Po
#	source='../../../Source/ZenLib/CriticalSection.cpp' object='CriticalSection.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CriticalSection.obj `if test -f '../../../Source/ZenLib/CriticalSection.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/CriticalSection.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/CriticalSection.cpp'; fi`

Dir.o: ../../../Source/ZenLib/Dir.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dir.o -MD -MP -MF $(DEPDIR)/Dir.Tpo -c -o Dir.o `test -f '../../../Source/ZenLib/Dir.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Dir.cpp
	$(am__mv) $(DEPDIR)/Dir.Tpo $(DEPDIR)/Dir.Po
#	source='../../../Source/ZenLib/Dir.cpp' object='Dir.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dir.o `test -f '../../../Source/ZenLib/Dir.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Dir.cpp

Dir.obj: ../../../Source/ZenLib/Dir.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dir.obj -MD -MP -MF $(DEPDIR)/Dir.Tpo -c -o Dir.obj `if test -f '../../../Source/ZenLib/Dir.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Dir.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Dir.cpp'; fi`
	$(am__mv) $(DEPDIR)/Dir.Tpo $(DEPDIR)/Dir.Po
#	source='../../../Source/ZenLib/Dir.cpp' object='Dir.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dir.obj `if test -f '../../../Source/ZenLib/Dir.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Dir.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Dir.cpp'; fi`

File.o: ../../../Source/ZenLib/File.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT File.o -MD -MP -MF $(DEPDIR)/File.Tpo -c -o File.o `test -f '../../../Source/ZenLib/File.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/File.cpp
	$(am__mv) $(DEPDIR)/File.Tpo $(DEPDIR)/File.Po
#	source='../../../Source/ZenLib/File.cpp' object='File.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o File.o `test -f '../../../Source/ZenLib/File.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/File.cpp

File.obj: ../../../Source/ZenLib/File.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT File.obj -MD -MP -MF $(DEPDIR)/File.Tpo -c -o File.obj `if test -f '../../../Source/ZenLib/File.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/File.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/File.cpp'; fi`
	$(am__mv) $(DEPDIR)/File.Tpo $(DEPDIR)/File.Po
#	source='../../../Source/ZenLib/File.cpp' object='File.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o File.obj `if test -f '../../../Source/ZenLib/File.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/File.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/File.cpp'; fi`

FileName.o: ../../../Source/ZenLib/FileName.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FileName.o -MD -MP -MF $(DEPDIR)/FileName.Tpo -c -o FileName.o `test -f '../../../Source/ZenLib/FileName.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/FileName.cpp
	$(am__mv) $(DEPDIR)/FileName.Tpo $(DEPDIR)/FileName.Po
#	source='../../../Source/ZenLib/FileName.cpp' object='FileName.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FileName.o `test -f '../../../Source/ZenLib/FileName.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/FileName.cpp

FileName.obj: ../../../Source/ZenLib/FileName.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FileName.obj -MD -MP -MF $(DEPDIR)/FileName.Tpo -c -o FileName.obj `if test -f '../../../Source/ZenLib/FileName.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/FileName.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/FileName.cpp'; fi`
	$(am__mv) $(DEPDIR)/FileName.Tpo $(DEPDIR)/FileName.Po
#	source='../../../Source/ZenLib/FileName.cpp' object='FileName.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FileName.obj `if test -f '../../../Source/ZenLib/FileName.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/FileName.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/FileName.cpp'; fi`

InfoMap.o: ../../../Source/ZenLib/InfoMap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InfoMap.o -MD -MP -MF $(DEPDIR)/InfoMap.Tpo -c -o InfoMap.o `test -f '../../../Source/ZenLib/InfoMap.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/InfoMap.cpp
	$(am__mv) $(DEPDIR)/InfoMap.Tpo $(DEPDIR)/InfoMap.Po
#	source='../../../Source/ZenLib/InfoMap.cpp' object='InfoMap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InfoMap.o `test -f '../../../Source/ZenLib/InfoMap.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/InfoMap.cpp

InfoMap.obj: ../../../Source/ZenLib/InfoMap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InfoMap.obj -MD -MP -MF $(DEPDIR)/InfoMap.Tpo -c -o InfoMap.obj `if test -f '../../../Source/ZenLib/InfoMap.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/InfoMap.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/InfoMap.cpp'; fi`
	$(am__mv) $(DEPDIR)/InfoMap.Tpo $(DEPDIR)/InfoMap.Po
#	source='../../../Source/ZenLib/InfoMap.cpp' object='InfoMap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InfoMap.obj `if test -f '../../../Source/ZenLib/InfoMap.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/InfoMap.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/InfoMap.cpp'; fi`

int128s.o: ../../../Source/ZenLib/int128s.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT int128s.o -MD -MP -MF $(DEPDIR)/int128s.Tpo -c -o int128s.o `test -f '../../../Source/ZenLib/int128s.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/int128s.cpp
	$(am__mv) $(DEPDIR)/int128s.Tpo $(DEPDIR)/int128s.Po
#	source='../../../Source/ZenLib/int128s.cpp' object='int128s.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o int128s.o `test -f '../../../Source/ZenLib/int128s.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/int128s.cpp

int128s.obj: ../../../Source/ZenLib/int128s.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT int128s.obj -MD -MP -MF $(DEPDIR)/int128s.Tpo -c -o int128s.obj `if test -f '../../../Source/ZenLib/int128s.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/int128s.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/int128s.cpp'; fi`
	$(am__mv) $(DEPDIR)/int128s.Tpo $(DEPDIR)/int128s.Po
#	source='../../../Source/ZenLib/int128s.cpp' object='int128s.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o int128s.obj `if test -f '../../../Source/ZenLib/int128s.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/int128s.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/int128s.cpp'; fi`

int128u.o: ../../../Source/ZenLib/int128u.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT int128u.o -MD -MP -MF $(DEPDIR)/int128u.Tpo -c -o int128u.o `test -f '../../../Source/ZenLib/int128u.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/int128u.cpp
	$(am__mv) $(DEPDIR)/int128u.Tpo $(DEPDIR)/int128u.Po
#	source='../../../Source/ZenLib/int128u.cpp' object='int128u.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o int128u.o `test -f '../../../Source/ZenLib/int128u.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/int128u.cpp

int128u.obj: ../../../Source/ZenLib/int128u.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT int128u.obj -MD -MP -MF $(DEPDIR)/int128u.Tpo -c -o int128u.obj `if test -f '../../../Source/ZenLib/int128u.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/int128u.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/int128u.cpp'; fi`
	$(am__mv) $(DEPDIR)/int128u.Tpo $(DEPDIR)/int128u.Po
#	source='../../../Source/ZenLib/int128u.cpp' object='int128u.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o int128u.obj `if test -f '../../../Source/ZenLib/int128u.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/int128u.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/int128u.cpp'; fi`

MemoryDebug.o: ../../../Source/ZenLib/MemoryDebug.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemoryDebug.o -MD -MP -MF $(DEPDIR)/MemoryDebug.Tpo -c -o MemoryDebug.o `test -f '../../../Source/ZenLib/MemoryDebug.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/MemoryDebug.cpp
	$(am__mv) $(DEPDIR)/MemoryDebug.Tpo $(DEPDIR)/MemoryDebug.Po
#	source='../../../Source/ZenLib/MemoryDebug.cpp' object='MemoryDebug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemoryDebug.o `test -f '../../../Source/ZenLib/MemoryDebug.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/MemoryDebug.cpp

MemoryDebug.obj: ../../../Source/ZenLib/MemoryDebug.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemoryDebug.obj -MD -MP -MF $(DEPDIR)/MemoryDebug.Tpo -c -o MemoryDebug.obj `if test -f '../../../Source/ZenLib/MemoryDebug.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/MemoryDebug.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/MemoryDebug.cpp'; fi`
	$(am__mv) $(DEPDIR)/MemoryDebug.Tpo $(DEPDIR)/MemoryDebug.Po
#	source='../../../Source/ZenLib/MemoryDebug.cpp' object='MemoryDebug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemoryDebug.obj `if test -f '../../../Source/ZenLib/MemoryDebug.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/MemoryDebug.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/MemoryDebug.cpp'; fi`

OS_Utils.o: ../../../Source/ZenLib/OS_Utils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OS_Utils.o -MD -MP -MF $(DEPDIR)/OS_Utils.Tpo -c -o OS_Utils.o `test -f '../../../Source/ZenLib/OS_Utils.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/OS_Utils.cpp
	$(am__mv) $(DEPDIR)/OS_Utils.Tpo $(DEPDIR)/OS_Utils.Po
#	source='../../../Source/ZenLib/OS_Utils.cpp' object='OS_Utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OS_Utils.o `test -f '../../../Source/ZenLib/OS_Utils.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/OS_Utils.cpp

OS_Utils.obj: ../../../Source/ZenLib/OS_Utils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OS_Utils.obj -MD -MP -MF $(DEPDIR)/OS_Utils.Tpo -c -o OS_Utils.obj `if test -f '../../../Source/ZenLib/OS_Utils.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/OS_Utils.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/OS_Utils.cpp'; fi`
	$(am__mv) $(DEPDIR)/OS_Utils.Tpo $(DEPDIR)/OS_Utils.Po
#	source='../../../Source/ZenLib/OS_Utils.cpp' object='OS_Utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OS_Utils.obj `if test -f '../../../Source/ZenLib/OS_Utils.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/OS_Utils.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/OS_Utils.cpp'; fi`

Translation.o: ../../../Source/ZenLib/Translation.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Translation.o -MD -MP -MF $(DEPDIR)/Translation.Tpo -c -o Translation.o `test -f '../../../Source/ZenLib/Translation.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Translation.cpp
	$(am__mv) $(DEPDIR)/Translation.Tpo $(DEPDIR)/Translation.Po
#	source='../../../Source/ZenLib/Translation.cpp' object='Translation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Translation.o `test -f '../../../Source/ZenLib/Translation.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Translation.cpp

Translation.obj: ../../../Source/ZenLib/Translation.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Translation.obj -MD -MP -MF $(DEPDIR)/Translation.Tpo -c -o Translation.obj `if test -f '../../../Source/ZenLib/Translation.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Translation.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Translation.cpp'; fi`
	$(am__mv) $(DEPDIR)/Translation.Tpo $(DEPDIR)/Translation.Po
#	source='../../../Source/ZenLib/Translation.cpp' object='Translation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Translation.obj `if test -f '../../../Source/ZenLib/Translation.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Translation.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Translation.cpp'; fi`

Thread.o: ../../../Source/ZenLib/Thread.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Thread.o -MD -MP -MF $(DEPDIR)/Thread.Tpo -c -o Thread.o `test -f '../../../Source/ZenLib/Thread.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Thread.cpp
	$(am__mv) $(DEPDIR)/Thread.Tpo $(DEPDIR)/Thread.Po
#	source='../../../Source/ZenLib/Thread.cpp' object='Thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Thread.o `test -f '../../../Source/ZenLib/Thread.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Thread.cpp

Thread.obj: ../../../Source/ZenLib/Thread.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Thread.obj -MD -MP -MF $(DEPDIR)/Thread.Tpo -c -o Thread.obj `if test -f '../../../Source/ZenLib/Thread.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Thread.cpp'; fi`
	$(am__mv) $(DEPDIR)/Thread.Tpo $(DEPDIR)/Thread.Po
#	source='../../../Source/ZenLib/Thread.cpp' object='Thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Thread.obj `if test -f '../../../Source/ZenLib/Thread.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Thread.cpp'; fi`

Utils.o: ../../../Source/ZenLib/Utils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Utils.o -MD -MP -MF $(DEPDIR)/Utils.Tpo -c -o Utils.o `test -f '../../../Source/ZenLib/Utils.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Utils.cpp
	$(am__mv) $(DEPDIR)/Utils.Tpo $(DEPDIR)/Utils.Po
#	source='../../../Source/ZenLib/Utils.cpp' object='Utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Utils.o `test -f '../../../Source/ZenLib/Utils.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Utils.cpp

Utils.obj: ../../../Source/ZenLib/Utils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Utils.obj -MD -MP -MF $(DEPDIR)/Utils.Tpo -c -o Utils.obj `if test -f '../../../Source/ZenLib/Utils.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Utils.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Utils.cpp'; fi`
	$(am__mv) $(DEPDIR)/Utils.Tpo $(DEPDIR)/Utils.Po
#	source='../../../Source/ZenLib/Utils.cpp' object='Utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Utils.obj `if test -f '../../../Source/ZenLib/Utils.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Utils.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Utils.cpp'; fi`

Ztring.o: ../../../Source/ZenLib/Ztring.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Ztring.o -MD -MP -MF $(DEPDIR)/Ztring.Tpo -c -o Ztring.o `test -f '../../../Source/ZenLib/Ztring.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Ztring.cpp
	$(am__mv) $(DEPDIR)/Ztring.Tpo $(DEPDIR)/Ztring.Po
#	source='../../../Source/ZenLib/Ztring.cpp' object='Ztring.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Ztring.o `test -f '../../../Source/ZenLib/Ztring.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/Ztring.cpp

Ztring.obj: ../../../Source/ZenLib/Ztring.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Ztring.obj -MD -MP -MF $(DEPDIR)/Ztring.Tpo -c -o Ztring.obj `if test -f '../../../Source/ZenLib/Ztring.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Ztring.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Ztring.cpp'; fi`
	$(am__mv) $(DEPDIR)/Ztring.Tpo $(DEPDIR)/Ztring.Po
#	source='../../../Source/ZenLib/Ztring.cpp' object='Ztring.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Ztring.obj `if test -f '../../../Source/ZenLib/Ztring.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/Ztring.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/Ztring.cpp'; fi`

ZtringList.o: ../../../Source/ZenLib/ZtringList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ZtringList.o -MD -MP -MF $(DEPDIR)/ZtringList.Tpo -c -o ZtringList.o `test -f '../../../Source/ZenLib/ZtringList.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/ZtringList.cpp
	$(am__mv) $(DEPDIR)/ZtringList.Tpo $(DEPDIR)/ZtringList.Po
#	source='../../../Source/ZenLib/ZtringList.cpp' object='ZtringList.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ZtringList.o `test -f '../../../Source/ZenLib/ZtringList.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/ZtringList.cpp

ZtringList.obj: ../../../Source/ZenLib/ZtringList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ZtringList.obj -MD -MP -MF $(DEPDIR)/ZtringList.Tpo -c -o ZtringList.obj `if test -f '../../../Source/ZenLib/ZtringList.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/ZtringList.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/ZtringList.cpp'; fi`
	$(am__mv) $(DEPDIR)/ZtringList.Tpo $(DEPDIR)/ZtringList.Po
#	source='../../../Source/ZenLib/ZtringList.cpp' object='ZtringList.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ZtringList.obj `if test -f '../../../Source/ZenLib/ZtringList.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/ZtringList.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/ZtringList.cpp'; fi`

ZtringListList.o: ../../../Source/ZenLib/ZtringListList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ZtringListList.o -MD -MP -MF $(DEPDIR)/ZtringListList.Tpo -c -o ZtringListList.o `test -f '../../../Source/ZenLib/ZtringListList.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/ZtringListList.cpp
	$(am__mv) $(DEPDIR)/ZtringListList.Tpo $(DEPDIR)/ZtringListList.Po
#	source='../../../Source/ZenLib/ZtringListList.cpp' object='ZtringListList.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ZtringListList.o `test -f '../../../Source/ZenLib/ZtringListList.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/ZtringListList.cpp

ZtringListList.obj: ../../../Source/ZenLib/ZtringListList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ZtringListList.obj -MD -MP -MF $(DEPDIR)/ZtringListList.Tpo -c -o ZtringListList.obj `if test -f '../../../Source/ZenLib/ZtringListList.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/ZtringListList.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/ZtringListList.cpp'; fi`
	$(am__mv) $(DEPDIR)/ZtringListList.Tpo $(DEPDIR)/ZtringListList.Po
#	source='../../../Source/ZenLib/ZtringListList.cpp' object='ZtringListList.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ZtringListList.obj `if test -f '../../../Source/ZenLib/ZtringListList.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/ZtringListList.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/ZtringListList.cpp'; fi`

ZtringListListF.o: ../../../Source/ZenLib/ZtringListListF.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ZtringListListF.o -MD -MP -MF $(DEPDIR)/ZtringListListF.Tpo -c -o ZtringListListF.o `test -f '../../../Source/ZenLib/ZtringListListF.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/ZtringListListF.cpp
	$(am__mv) $(DEPDIR)/ZtringListListF.Tpo $(DEPDIR)/ZtringListListF.Po
#	source='../../../Source/ZenLib/ZtringListListF.cpp' object='ZtringListListF.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ZtringListListF.o `test -f '../../../Source/ZenLib/ZtringListListF.cpp' || echo '$(srcdir)/'`../../../Source/ZenLib/ZtringListListF.cpp

ZtringListListF.obj: ../../../Source/ZenLib/ZtringListListF.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ZtringListListF.obj -MD -MP -MF $(DEPDIR)/ZtringListListF.Tpo -c -o ZtringListListF.obj `if test -f '../../../Source/ZenLib/ZtringListListF.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/ZtringListListF.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/ZtringListListF.cpp'; fi`
	$(am__mv) $(DEPDIR)/ZtringListListF.Tpo $(DEPDIR)/ZtringListListF.Po
#	source='../../../Source/ZenLib/ZtringListListF.cpp' object='ZtringListListF.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ZtringListListF.obj `if test -f '../../../Source/ZenLib/ZtringListListF.cpp'; then $(CYGPATH_W) '../../../Source/ZenLib/ZtringListListF.cpp'; else $(CYGPATH_W) '$(srcdir)/../../../Source/ZenLib/ZtringListListF.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	test -d "$(distdir)" || mkdir "$(distdir)"
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	-test -n "$(am__skip_mode_fix)" \
	|| find "$(distdir)" -type d ! -perm -755 \
		-exec chmod u+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r "$(distdir)"
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-lzma: distdir
	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma
	$(am__remove_distdir)

dist-xz: distdir
	tardir=$(distdir) && $(am__tar) | xz -c >$(distdir).tar.xz
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.lzma*) \
	  lzma -dc $(distdir).tar.lzma | $(am__untar) ;;\
	*.tar.xz*) \
	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod u+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	test -d $(distdir)/_build || exit 0; \
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && am__cwd=`pwd` \
	  && $(am__cd) $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \
	  && cd "$$am__cwd" \
	  || exit 1
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@$(am__cd) '$(distuninstallcheck_dir)' \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am am--refresh check check-am clean \
	clean-binPROGRAMS clean-generic ctags dist dist-all dist-bzip2 \
	dist-gzip dist-lzma dist-shar dist-tarZ dist-xz dist-zip \
	distcheck distclean distclean-compile distclean-generic \
	distclean-tags distcleancheck distdir distuninstallcheck dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
